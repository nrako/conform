{"name":"Conform","tagline":"Simple, flexible node.js form module with casting and validation; highly inspired by mongoose","body":"# Formal [![Build Status](https://travis-ci.org/nrako/formal.png?branch=master)](https://travis-ci.org/nrako/formal) [![Coverage Status](https://coveralls.io/repos/nrako/formal/badge.png?branch=master)](https://coveralls.io/r/nrako/formal) [![Dependency Status](https://gemnasium.com/nrako/formal.png)](https://gemnasium.com/nrako/formal)\r\n\r\nFormal is a Form module for node.js inspired by mongoose, Formal provides casting, validation and much more!\r\n\r\nDRY! If you use Mongoose, use [Formal-Mongoose](https://github.com/nrako/formal-mongoose) to define your form from an existing schema.\r\n\r\n## Example\r\n\r\n```javascript\r\nvar Form = require('formal');\r\n\r\nvar form = new Form({\r\n  name: {\r\n    family: String,\r\n    first: {\r\n      type: [String],\r\n      set: function(val) {return val.split(' ');}\r\n    }\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    match: [/^[a-z0-9._-]+@[a-z0-9.-]{2,}[.][a-z]{2,3}$/, 'email],\r\n    attributes: {\r\n      type: 'email'\r\n    }\r\n  },\r\n  age: {type: Number, min: 18}\r\n}, {\r\n  errors: {\r\n    // custom error message for match validator\r\n    email: 'Value is not a valid email'\r\n}\r\n});\r\n\r\nform.set({\r\n  name: {family: 'Martinez'},\r\n  'name.first': 'José Luis Chavez',\r\n  age: 12\r\n});\r\n\r\nform.validate(function (err) {\r\n  console.log(err); // missing required email, age to low\r\n  console.log(form.get('name.first.0')); // José\r\n  console.log(form.export()); // data with nice error messages\r\n});\r\n```\r\n\r\n## Install\r\n`npm install formal --save`\r\n\r\n## Summary\r\n\r\nThis module focus on form field casting and validation, with suppports for advanced path definition.\r\n\r\n### It supports\r\n\r\n* field of type: String, Number, Date, Boolean and [of each type] *(Arrays)*\r\n* dot.F.notation path à la mongoose to access field and for.arrays.0 too\r\n* shortcut validators, for required, enum, min, max and match to match mongoose\r\n* shortcut setters mimicking mongoose for trim, lowercase and uppercase\r\n* setters & getters\r\n* custom validators\r\n* virtuals\r\n* route-middleware to work seamlessy with express or connect\r\n* ... and of course it match mongoose but works fine without mongoose\r\n\r\n### It doesn't\r\n\r\n* render form to html (this will be supported via an external module)\r\n* define a form from a mongoose schema, but [Formal-Mongoose](https://github.com/nrako/formal-mongoose) does!\r\n\r\n### TODO... maybe\r\n\r\n* support for sub-Form and array of [Form]\r\n* npm package to \"decorate\" a form, render the form into html via [consolidate.js](https://github.com/visionmedia/consolidate.js/)\r\n* support browser\r\n\r\n## API\r\n\r\nSummary of the most useful methods.  \r\nFor a complete list see [gh-pages documentation](http://nrako.github.io/formal).\r\n\r\n### new Form(Object:definition[, Object:option]):instance\r\n\r\n```javascript\r\nvar form = new Form({\r\n  username: {\r\n    type: String,\r\n    trim: true,\r\n    required: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    trim: true,\r\n    required: true\r\n  }\r\n}, {\r\n  errors: {\r\n    required: 'Please fill out this field'\r\n  }\r\n});\r\n```\r\n\r\n#### Options\r\n\r\n```javascript\r\n{\r\n  dataSources: ['body', 'query', 'params'], // sources of data used by the route-middleware\r\n  autoTrim: false,  // automatically add trim options to fields\r\n  autoLocals: true,  // form.middleware adds form.export + validation results to res.locals\r\n  errors: { // default errors message, can be extanded to match your own error type\r\n    required: 'This is a required field',\r\n    min: 'Value must be greater than or equal to <%= data.min %>',\r\n    max: 'Value must be less than or equal to <%= data.max %>',\r\n  }\r\n}\r\n```\r\n\r\n#### Connect and express route-middleware\r\n\r\nFor connect and express calling the constructor function will operate as a shorthand which return\r\nthe result of `form.middleware()` which will monkey patch the request and the response object.\r\n\r\n```javascript\r\nvar form = require('formal');\r\napp.post('/url',\r\n  // sames as (new Form({...})).middleware()\r\n  form({\r\n    username: String\r\n  }),\r\n  function (req, res) {\r\n    console.log(req.form);\r\n    console.log(res.locals.form.username.value);\r\n  }\r\n);\r\n```\r\n\r\n### form.field(obj:Object):this\r\n\r\nDefine and add a new field to the form.\r\n\r\n#### Alias\r\n\r\n`form.add()`\r\n\r\n```javascript\r\nform.field({\r\n  example: {\r\n    'of.a.nested.field': String\r\n  }\r\n});\r\n```\r\n\r\n### form.set(path:String|obj:Object[, value])\r\n\r\nSet values.\r\n\r\n```javascript\r\nform.set({\r\n  username: 'nrako'\r\n});\r\n\r\nform.set('example.of.a.nested.field', 'overboard nested path example');\r\n```\r\n\r\n### form.get(path:String):value\r\n\r\nReturn a value with getters applied.\r\n\r\n```javascript\r\nconsole.log(form.get('username')); //nrako\r\n```\r\n\r\n### form.getData():Object\r\n\r\nReturn tree data with getters applied\r\n\r\n```javascript\r\nconsole.log(form.getData()); // Object\r\n```\r\n\r\n### form.validate(callback(err):Function)\r\n\r\nValidate all fields and return an ValidationError object, if any, via the callback function.\r\n\r\n```javascript\r\nform.validate(function(err) {\r\n  console.log(err) // ValidationError object\r\n});\r\n```\r\n\r\n### form.export(err:ValidationError):Object\r\n\r\n`err`: a ValidationError object returned by `from.validate`\r\n\r\nExport and return an object which includes all friendly message error when error\r\ntemplate message is defined in `options.errors`.\r\n\r\n```javascript\r\nform.validate(function(err) {\r\n  var result = form.export(err);\r\n  console.log(result.username.value); // nrako\r\n  console.log(result.password.error); // Please fill out this field\r\n});\r\n```\r\n\r\n### form.middleware():Function(req, res, next)\r\n\r\nProvide a route-middleware à la connect/express which will monkey patch\r\nthe `request.form` and `response.locals.form`.\r\n\r\n```javascript\r\napp.post('/url',\r\n  form.middleware({\r\n    username: String\r\n  }),\r\n  function (req, res) {\r\n    console.log(req.form.getData());\r\n    console.log(res.locals.form.username.value);\r\n  }\r\n);\r\n```\r\n\r\n## Custom error message for a custom validation\r\n\r\nCustom error message within the result of `form.export(errors)` are available with the form `options.errors`.\r\nError message must be a valid [lodash](http://lodash.com/docs#template) string template which is populate with the field content.\r\n\r\n### Example\r\n\r\n```javascript\r\nvar form = new Form({\r\n  a: {\r\n    type: String,\r\n    validate: [/^a/i, 'startWithA']\r\n  },\r\n  b: {\r\n    type: String,\r\n    validate: [/^b/i, 'startWithB']\r\n  }\r\n}, {\r\n  errors: {\r\n    'startWithA': 'Value <%= value %> should start with \"a\"'\r\n  }\r\n});\r\n\r\nform.option('errors', {startWithB: 'Value <%= value %> should start with \"b\"'})\r\n\r\nform.set({a: 'Babar', 'b': 'Basile'});\r\n\r\nform.validate(function (err) {\r\n  var result = form.export(err);\r\n  console.log(result);\r\n});\r\n```\r\n\r\nSee the [tests](https://github.com/nrako/formal/blob/master/test/form.validation.spec.coffee) for more examples.\r\n\r\n## Test\r\n`npm test`  \r\n[Mocha Coverage](http://nrako.github.io/formal/coverage.html)  \r\n`npm run-script coverage`  \r\n[On Coveralls.io](https://coveralls.io/r/nrako/formal)\r\n\r\nAll tests are in Coffee-script, hence easy to read! Provides a great way to understand the API ;)\r\n\r\n## LICENSE\r\n\r\nMIT\r\n","google":"UA-40707242-1","note":"Don't delete this file! It's used internally to help with page regeneration."}