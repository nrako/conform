{"name":"Conform","tagline":"Simple, flexible node.js form module with casting and validation; highly inspired by mongoose","body":"# Conform\r\n\r\n**con·form  [kuhn-fawrm]**  \r\n*~~verb~~ form (used ~~without~~ via object)*  \r\n**1.** to act in accordance or harmony; comply (usually followed by to  ): *to conform to rules.*\r\n\r\n**Conform is an awesome node.js FORM module with casting and validation inspired by mongoose!**\r\n\r\n## Example\r\n```javascript\r\nvar Form = require('conform');\r\n\r\nvar form = new Form({\r\n  name: {\r\n    family: String,\r\n    first: {\r\n      type: [String],\r\n      set: function(val) {return val.split(' ');}\r\n    }\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    match: /^[a-z0-9._-]+@[a-z0-9.-]{2,}[.][a-z]{2,3}$/,\r\n    attributes: {\r\n      type: 'email'\r\n    }\r\n  },\r\n  age: {type: Number, min: 18}\r\n});\r\n\r\nform.set({\r\n  name: {family: 'Martinez'},\r\n  'name.first': 'José Luis Chavez',\r\n  age: 12\r\n});\r\n\r\nform.validate(function (err) {\r\n  console.log(err); // missing required email, age to low\r\n  console.log(form.get('name.first.0')); // José\r\n  console.log(form.export());\r\n});\r\n```\r\n\r\n## Install\r\n`npm install conform --save`\r\n\r\n## Summary\r\n\r\nThis module focus on form field casting and validation, with suppports for advanced path definition.\r\n\r\n### It supports\r\n\r\n* field of type: String, Number, Date, Boolean and [of each type] *(Arrays)*\r\n* dot.F.notation path à la mongoose to access field and for.arrays.0 too\r\n* shortcut validators, for required, enum, min, max and match to match mongoose\r\n* shortcut setters mimicking mongoose for trim, lowercase and uppercase\r\n* setters & getters\r\n* custom validators\r\n* virtuals\r\n* route-middleware to work seamlessy with express or connect\r\n* ... and of course it match mongoose but works fine without mongoose\r\n\r\n### It doesn't\r\n\r\n* render form to html (this will be supported via an external module)\r\n\r\n### To comes... maybe\r\n\r\n* support for sub-Form\r\n* support for sub-[Form]\r\n* incoming npm module to define the form from an existing mongoose schema\r\n* incoming npm (decorator) module to render the form into html via consolidate.js\r\n* support browser\r\n\r\n## API\r\n\r\nSummary of the most useful methods. For a complete list see [documentation](http://nrako.github.io/conform).\r\n\r\n### new Form(Object:definition[, Object:option]):instance\r\n\r\nFor connect and express the alternative factory method can be used as a quick helper to\r\ncreate a new instance and return form.middleware() to monkey patch the request and\r\nresponse object.\r\n```javascript\r\napp.post('/url',\r\n  // sames as (new Form({...})).middleware()\r\n  form({\r\n    fieldA: String\r\n  }),\r\n  function (req, res) {\r\n    console.log(req.body.form);\r\n    console.log(res.locals.form.fieldA.value);\r\n  }\r\n);\r\n```\r\n\r\n### form.field(obj:Object):this\r\n\r\nDefine a new field.\r\n\r\n```javascript\r\nform.set({\r\n  example: {\r\n    'of.a.nested.field': String\r\n  }\r\n});\r\n```\r\n\r\n### form.virtual(name:String, options:Object)\r\n\r\n### form.path(path:String):Field (arity 1)\r\n\r\n### form.path(path:String, obj:Object):this (arity 2)\r\n\r\n### form.set(path:String|obj:Object[, value])\r\n\r\n### form.get(path:String):value\r\n\r\n### form.validate(callback(err):Function)\r\n\r\nValidate all fields and return an err object, if any, via the callback function.\r\n\r\n### form.middleware():Function(req, res, next)\r\n\r\nProvide a route-middleware à la connect/express which will monkey patch\r\nthe `req.body.form` and `res.locals.form`.\r\n\r\n## Test\r\n`npm test`\r\n[Coverage](http://nrako.github.io/conform/coverage.html)\r\n`npm run-script coverage`\r\n\r\nTests are in Coffee-script and easy to read! Provides a great way to understand the API.\r\n\r\n## LICENSE\r\n\r\nMIT\r\n","google":"UA-40707242-1","note":"Don't delete this file! It's used internally to help with page regeneration."}